/*!**************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/scss/style.scss ***!
  \**************************************************************************************************************/
@import url(https://fonts.googleapis.com/css2?family=Red+Hat+Text:wght@700&display=swap);
/*!******************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/scss/style.scss (1) ***!
  \******************************************************************************************************************/
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
     ========================================================================== */
/**
   * Remove the margin in all browsers.
   */
body {
  margin: 0;
}

/**
   * Render the `main` element consistently in IE.
   */
main {
  display: block;
}

/**
   * Correct the font size and margin on `h1` elements within `section` and
   * `article` contexts in Chrome, Firefox, and Safari.
   */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
     ========================================================================== */
/**
   * 1. Add the correct box sizing in Firefox.
   * 2. Show the overflow in Edge and IE.
   */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
     ========================================================================== */
/**
   * Remove the gray background on active links in IE 10.
   */
a {
  background-color: transparent;
}

/**
   * 1. Remove the bottom border in Chrome 57-
   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
   * Add the correct font weight in Chrome, Edge, and Safari.
   */
b,
strong {
  font-weight: bolder;
}

/**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
   * Add the correct font size in all browsers.
   */
small {
  font-size: 80%;
}

/**
   * Prevent `sub` and `sup` elements from affecting the line height in
   * all browsers.
   */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
     ========================================================================== */
/**
   * Remove the border on images inside links in IE 10.
   */
img {
  border-style: none;
}

/* Forms
     ========================================================================== */
/**
   * 1. Change the font styles in all browsers.
   * 2. Remove the margin in Firefox and Safari.
   */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
   * Show the overflow in IE.
   * 1. Show the overflow in Edge.
   */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
   * Remove the inheritance of text transform in Edge, Firefox, and IE.
   * 1. Remove the inheritance of text transform in Firefox.
   */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
   * Correct the inability to style clickable types in iOS and Safari.
   */
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
   * Remove the inner border and padding in Firefox.
   */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
   * Restore the focus styles unset by the previous rule.
   */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
   * Correct the padding in Firefox.
   */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
   * 1. Correct the text wrapping in Edge and IE.
   * 2. Correct the color inheritance from `fieldset` elements in IE.
   * 3. Remove the padding so developers are not caught out when they zero out
   *    `fieldset` elements in all browsers.
   */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
   * Add the correct vertical alignment in Chrome, Firefox, and Opera.
   */
progress {
  vertical-align: baseline;
}

/**
   * Remove the default vertical scrollbar in IE 10+.
   */
textarea {
  overflow: auto;
}

/**
   * 1. Add the correct box sizing in IE 10.
   * 2. Remove the padding in IE 10.
   */
[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
   * Correct the cursor style of increment and decrement buttons in Chrome.
   */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
   * 1. Correct the odd appearance in Chrome and Safari.
   * 2. Correct the outline style in Safari.
   */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
   * Remove the inner padding in Chrome and Safari on macOS.
   */
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
   * 1. Correct the inability to style clickable types in iOS and Safari.
   * 2. Change font properties to `inherit` in Safari.
   */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
     ========================================================================== */
/*
   * Add the correct display in Edge, IE 10+, and Firefox.
   */
details {
  display: block;
}

/*
   * Add the correct display in all browsers.
   */
summary {
  display: list-item;
}

/* Misc
     ========================================================================== */
/**
   * Add the correct display in IE 10+.
   */
template {
  display: none;
}

/**
   * Add the correct display in IE 10.
   */
[hidden] {
  display: none;
}

ul,
ol {
  list-style-type: none;
}

html {
  box-sizing: border-box;
}
html *,
html *::before,
html *::after {
  box-sizing: inherit;
}

.countdown {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  gap: 7rem;
  height: 100vh;
  background-color: #1e1f29;
  background-image: url(815d688fd937623063b5.svg), url(166881a1c03d6b1239f5.svg);
  background-repeat: no-repeat, no-repeat;
  background-size: max(1440px, 100%), max(1440px, 100%);
  background-position: 84% bottom, center;
  padding: clamp(20vh, 15vw, 25vh) 1.5rem 10vh 1.5rem;
}
.countdown__title {
  padding: 0;
  margin: 0;
  font-family: "Red Hat Text", sans-serif;
  font-size: clamp(1.25rem, 5vw, 1.75rem);
  color: white;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5rem;
  text-align: center;
}
.countdown .timer.l-flex {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: clamp(1rem, 0vw, 2rem);
}
.countdown__socialmedia-container {
  margin-top: auto;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 2rem;
}
.countdown__socialmedia-icon {
  font-family: "Red Hat Text", sans-serif;
  font-size: 2rem;
  color: #8486a9;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.1s ease-in-out;
}
.countdown__socialmedia-icon:hover {
  color: #fb6087;
}

.timer {
  width: min(100%, 50rem);
}
.timer__tile-container {
  flex-basis: 25%;
  text-align: center;
}
.timer__tile {
  font-family: "Red Hat Text", sans-serif;
  font-size: clamp(1.75rem, 7.5vw, 5rem);
  color: #fb6087;
  font-weight: 700;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 1.5rem;
  aspect-ratio: 1;
  background-color: #343650;
  border-radius: clamp(5px, 0vw, 10px);
  box-shadow: 0 10px 0 0 #191a24;
  overflow: hidden;
  position: relative;
}
.timer__tile::before, .timer__tile::after {
  content: "";
  position: absolute;
  top: 50%;
  width: clamp(0.625rem, 2.5vw, 1.375rem);
  aspect-ratio: 1;
  border-radius: 50%;
  background-color: #191a24;
  z-index: 100;
}
.timer__tile::before {
  left: 0;
  transform: translate(-50%, -50%);
}
.timer__tile::after {
  right: 0;
  transform: translate(50%, -50%);
}
.timer__tile-number {
  position: absolute;
  inset: 0;
}
.timer__tile-number::before, .timer__tile-number::after {
  position: absolute;
  left: 0;
  right: 0;
  height: 50%;
  overflow: hidden;
  line-height: 0;
  display: flex;
  justify-content: center;
}
.timer__tile-number::before {
  content: attr(data-number-before);
  top: 0;
  align-items: flex-end;
}
.timer__tile-number::after {
  content: attr(data-number-after);
  bottom: 0;
  align-items: flex-start;
  background-color: #494b6f;
}
.timer__flip-front, .timer__flip-back {
  position: absolute;
  left: 0;
  right: 0;
  height: 50%;
  overflow: hidden;
  line-height: 0;
  display: flex;
  justify-content: center;
  z-index: 99;
}
.timer__flip-front {
  top: 0;
  align-items: flex-end;
  transform-origin: center bottom;
  background-color: #343650;
  transition: all 0.15s ease-in-out;
}
.timer__flip-front.flipped {
  transform: rotateX(90deg);
  background-color: #3e4160;
}
.timer__flip-back {
  top: 50%;
  align-items: flex-start;
  transform-origin: center top;
  background-color: #494b6f;
  transition: all 0.15s 0.15s ease-in-out;
}
.timer__flip-back.flipped {
  background-color: #3e4160;
  transform: rotateX(90deg);
}
.timer__time-unit {
  font-family: "Red Hat Text", sans-serif;
  font-size: clamp(0.25rem, 2vw, 1rem);
  color: #8486a9;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: clamp(0.125rem, 1vw, 0.375rem);
  margin-top: 2rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/